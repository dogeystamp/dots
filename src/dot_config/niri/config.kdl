// https://github.com/YaLTeR/niri/wiki/Configuration:-Overview

spawn-at-startup "niri" "msg" "action" "do-screen-transition" "-d" "800"

input {
    keyboard {
        xkb {
            options "caps:swapescape, compose:rctrl, altwin:swap_alt_win"
        }

		repeat-delay 300
		repeat-rate 50
    }

    touchpad {
        tap
		// disable while typing
		dwt
    }

	mouse {}

    warp-mouse-to-focus
	focus-follows-mouse max-scroll-amount="10%"
}

output "HDMI-A-1" {
    // off

	mode "2560x1440@143.912"
}

layout {
    gaps 36

	struts {
		left 4
		right 4
		top 4
		bottom 4
	}

    default-column-width { proportion 0.5; }

	preset-window-heights {
        proportion 0.0
        proportion 0.33333
        proportion 0.5
        proportion 0.66667
	}

    focus-ring {
        // off

        width 2

        active-color "#cceeee"
        inactive-color "#505050"
    }
}

cursor {
	xcursor-theme "capitaine-cursors"
	xcursor-size 28
}

spawn-at-startup "wallpaper"
spawn-at-startup "waybar"
spawn-at-startup "swayidle" "-w" "timeout" "550" "notify-send -a lock 'Idle, preparing to lock.'" "timeout" "600" "swaylock -f & niri msg action power-off-monitors" "before-sleep" "swaylock -f" "lock" "swaylock -f"

// no client side decoration
prefer-no-csd

// screenshot-path "~/med/screen/niri-%Y-%m-%d %H-%M-%S.png"

// You can also set this to null to disable saving screenshots to disk.
screenshot-path null

window-rule {
	geometry-corner-radius 5
	clip-to-geometry true
}

window-rule {
    match app-id=r#"qutebrowser"#
	opacity 0.8
}

animations {
	window-resize {
		custom-shader r"
			// Example: cropped next texture if it's bigger than the current geometry, and
			// crossfade between previous and next texture otherwise.
			vec4 crossfade_or_crop_next(vec3 coords_curr_geo, vec3 size_curr_geo) {
				vec3 coords_next_geo = niri_curr_geo_to_next_geo * coords_curr_geo;
				vec3 coords_prev_geo = niri_curr_geo_to_prev_geo * coords_curr_geo;

				vec3 coords_crop = niri_geo_to_tex_next * coords_next_geo;
				vec3 coords_stretch = niri_geo_to_tex_next * coords_curr_geo;
				vec3 coords_stretch_prev = niri_geo_to_tex_prev * coords_curr_geo;

				// We can crop if the current window size is smaller than the next window
				// size. One way to tell is by comparing to 1.0 the X and Y scaling
				// coefficients in the current-to-next transformation matrix.
				bool can_crop_by_x = niri_curr_geo_to_next_geo[0][0] <= 1.0;
				bool can_crop_by_y = niri_curr_geo_to_next_geo[1][1] <= 1.0;
				bool crop = can_crop_by_x && can_crop_by_y;

				vec4 color;

				if (crop) {
					// However, when we crop, we also want to crop out anything outside the
					// current geometry. This is because the area of the shader is unspecified
					// and usually bigger than the current geometry, so if we don't fill pixels
					// outside with transparency, the texture will leak out.
					//
					// When crossfading, this is not an issue because the area outside will
					// correspond to client-side decoration shadows, which are already supposed
					// to be outside.
					if (coords_curr_geo.x < 0.0 || 1.0 < coords_curr_geo.x ||
							coords_curr_geo.y < 0.0 || 1.0 < coords_curr_geo.y) {
						color = vec4(0.0);
					} else {
						color = texture2D(niri_tex_next, coords_crop.st);
					}
				} else {
					// If we can't crop, then crossfade.
					color = texture2D(niri_tex_next, coords_stretch.st);
					vec4 color_prev = texture2D(niri_tex_prev, coords_stretch_prev.st);
					color = mix(color_prev, color, niri_clamped_progress);
				}

				return color;
			}
			vec4 resize_color(vec3 coords_curr_geo, vec3 size_curr_geo) {
				// You can pick one of the example functions or write your own.
				return crossfade_or_crop_next(coords_curr_geo, size_curr_geo);
			}
		"
	}
}

window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"
}

window-rule {
	match title="discord"
	open-maximized true
}

binds {
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+0 { focus-workspace 10; }
    Mod+Shift+1 { move-column-to-workspace 1; }
    Mod+Shift+2 { move-column-to-workspace 2; }
    Mod+Shift+3 { move-column-to-workspace 3; }
    Mod+Shift+4 { move-column-to-workspace 4; }
    Mod+Shift+5 { move-column-to-workspace 5; }
    Mod+Shift+6 { move-column-to-workspace 6; }
    Mod+Shift+7 { move-column-to-workspace 7; }
    Mod+Shift+8 { move-column-to-workspace 8; }
    Mod+Shift+9 { move-column-to-workspace 9; }
    Mod+Shift+0 { move-column-to-workspace 10; }
    Mod+Shift+Slash { show-hotkey-overlay; }

    Mod+Shift+Return { spawn "newterm.sh"; }
    Mod+P            { spawn "fuzzel"; }
    Mod+Shift+B { spawn "qutebrowser"; }
    Mod+Shift+P { spawn "keepassxc"; }
    Mod+Shift+D { spawn "qbprof" "dsc"; }
    Ctrl+Mod+L { spawn "swaylock"; }

    Mod+A { spawn "style.sh"; }

    Mod+Shift+Z { spawn "clipedit.sh"; }
    Mod+Z { spawn "newterm.sh" "-e" "bookmk"; }

    XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
    XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }
    XF86AudioPlay        allow-when-locked=true { spawn "playerctl" "play-pause"; }
    XF86AudioNext        allow-when-locked=true { spawn "playerctl" "next"; }
    XF86AudioPrev        allow-when-locked=true { spawn "playerctl" "previous"; }

    Mod+Shift+C { close-window; }

    Mod+K           { focus-column-left; }
    Mod+Period      { focus-window-down; }
    Mod+Comma       { focus-window-up; }
    Mod+J           { focus-column-right; }

    Mod+Shift+Space { toggle-window-floating; }
    Mod+Space       { switch-focus-between-floating-and-tiling; }

    Mod+Shift+Left   { move-column-left; }
    Mod+Shift+Down   { move-window-down; }
    Mod+Shift+Up     { move-window-up; }
    Mod+Shift+Right  { move-column-right; }
    Mod+Shift+K      { move-column-left; }
    Mod+Return       { move-column-left; } // dwm muscle memory
    Mod+Shift+Period { move-window-down; }
    Mod+Shift+Comma  { move-window-up; }
    Mod+Shift+J      { move-column-right; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }

    Mod+H              { focus-monitor-left; }
    Mod+L              { focus-monitor-right; }

    Win+M              { spawn "dunstctl" "close"; }
    Win+N              { spawn "dunstctl" "history-pop"; }

    Mod+Shift+H        { move-column-to-monitor-left; }
    Mod+Shift+L        { move-column-to-monitor-right; }

    Mod+Page_Down      { focus-workspace-down; }
    Mod+Page_Up        { focus-workspace-up; }
    Mod+U              { focus-workspace-up; }
    Mod+I              { focus-workspace-down; }
    Mod+Ctrl+Page_Down { move-column-to-workspace-down; }
    Mod+Ctrl+Page_Up   { move-column-to-workspace-up; }
    Mod+Ctrl+U         { move-column-to-workspace-up; }
    Mod+Ctrl+I         { move-column-to-workspace-down; }

    Mod+Shift+Page_Down { move-workspace-to-monitor-right; }
    Mod+Shift+Page_Up   { move-workspace-to-monitor-left; }
    Mod+Shift+I         { move-workspace-down; }
    Mod+Shift+U         { move-workspace-up; }

    // You can bind mouse wheel scroll ticks using the following syntax.
    // These binds will change direction based on the natural-scroll setting.
    //
    // To avoid scrolling through workspaces really fast, you can use
    // the cooldown-ms property. The bind will be rate-limited to this value.
    // You can set a cooldown on any bind, but it's most useful for the wheel.
    Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    Mod+WheelScrollRight      { focus-column-right; }
    Mod+WheelScrollLeft       { focus-column-left; }
    Mod+Ctrl+WheelScrollRight { move-column-right; }
    Mod+Ctrl+WheelScrollLeft  { move-column-left; }

    Mod+Shift+WheelScrollDown      { focus-column-right; }
    Mod+Shift+WheelScrollUp        { focus-column-left; }
    Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }

    // Mod+TouchpadScrollDown { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02+"; }
    // Mod+TouchpadScrollUp   { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02-"; }

    Mod+Tab { focus-workspace-previous; }

    Mod+Ctrl+Comma  { consume-window-into-column; }
    Mod+Ctrl+Period { expel-window-from-column; }

    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    Mod+R { switch-preset-column-width; }
    Mod+Shift+R { switch-preset-window-height; }
    Mod+Ctrl+R { reset-window-height; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }
    Mod+C { center-column; }

    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }

    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }

    Print { screenshot; }
    Ctrl+Print { screenshot-screen; }
    Mod+Print { screenshot-window; }

    Mod+Shift+Q { quit; }

    Mod+Shift+S { spawn "suspend.sh"; }
}

hotkey-overlay {
	skip-at-startup
}
