// https://github.com/YaLTeR/niri/wiki/Configuration:-Introduction

spawn-at-startup "niri" "msg" "action" "do-screen-transition" "-d" "800"
spawn-at-startup "swayosd-server"
spawn-at-startup "gsettings" "set" "org.gnome.desktop.sound" "theme-name" "ocean"

input {
    keyboard {
        xkb {
			// see xkeyboard-config(7), "OPTIONS"
            options "caps:swapescape, compose:rctrl, altwin:swap_alt_win"
        }

		repeat-delay 300
		repeat-rate 50
    }


    mod-key "Super"
    mod-key-nested "Alt"

    touchpad {
        tap
		// disable while typing
		dwt
    }

	mouse {}

    warp-mouse-to-focus
	focus-follows-mouse max-scroll-amount="10%"
}

output "HDMI-A-1" {
	focus-at-startup
	position x=0 y=0
	mode "2560x1440@143.912"
}

output "eDP-1" {
	position x=2560 y=0
}

overview {
	backdrop-color "#eeeeee"
}

layout {
	background-color "transparent"

	default-column-display "tabbed"
	tab-indicator {
		hide-when-single-tab
		position "bottom"
		gap 8
		corner-radius 0
		gaps-between-tabs 10
		width 4
		length total-proportion=0.25
		active-color "black"
		inactive-color "gray"
	}

    gaps 36

	struts {
		left 10
		right 10
		top -15 // space for the bar
	}

    default-column-width { proportion 0.5; }

	preset-column-widths {
		fixed 640
        proportion 0.33333
        proportion 0.5
        proportion 0.66667
	}

	preset-window-heights {
		fixed 360
        proportion 0.5
        proportion 0.66667
        proportion 1.0
	}

	focus-ring {
        active-color "#00000011"
        inactive-color "#ffffff00"
		urgent-gradient from="fbb" to="#fff0" angle=135
		width 3
	}

	shadow {
		on
		softness 15
		offset x=1 y=7
	}
}

layer-rule {
	shadow {
		on
		softness 10
	}
}

layer-rule {
	match namespace="^wallpaper$"

	place-within-backdrop true
}

layer-rule {
    match namespace="waybar"

	shadow {
		off
		color "#00000044"
		inactive-color "#00000044"
		offset x=-5 y=-5
		softness 10
	}
}

cursor {
	xcursor-theme "capitaine-cursors"
	xcursor-size 28
}

spawn-at-startup "wallpaper"
spawn-at-startup "waybar"
spawn-at-startup "swayidle" "-w" "timeout" "550" "notify-send -a lock 'Idle, preparing to lock.'" "timeout" "600" "swaylock -f & niri msg action power-off-monitors" "before-sleep" "swaylock -f" "lock" "swaylock -f"

// no client side decoration
prefer-no-csd

// screenshot-path "~/med/screen/niri-%Y-%m-%d %H-%M-%S.png"

// You can also set this to null to disable saving screenshots to disk.
screenshot-path null

window-rule {
	geometry-corner-radius 2
	clip-to-geometry true
}

// clipedit.sh alacritty popup
window-rule {
    match app-id=r#"popup-bottom-center"#
	open-floating true
	tiled-state false
}

animations {
	window-resize {
		spring damping-ratio=1.0 stiffness=800 epsilon=0.0001

		custom-shader r"
			// Example: cropped next texture if it's bigger than the current geometry, and
			// crossfade between previous and next texture otherwise.
			vec4 crossfade_or_crop_next(vec3 coords_curr_geo, vec3 size_curr_geo) {
				vec3 coords_next_geo = niri_curr_geo_to_next_geo * coords_curr_geo;
				vec3 coords_prev_geo = niri_curr_geo_to_prev_geo * coords_curr_geo;

				vec3 coords_crop = niri_geo_to_tex_next * coords_next_geo;
				vec3 coords_stretch = niri_geo_to_tex_next * coords_curr_geo;
				vec3 coords_stretch_prev = niri_geo_to_tex_prev * coords_curr_geo;

				// We can crop if the current window size is smaller than the next window
				// size. One way to tell is by comparing to 1.0 the X and Y scaling
				// coefficients in the current-to-next transformation matrix.
				bool can_crop_by_x = niri_curr_geo_to_next_geo[0][0] <= 1.0;
				bool can_crop_by_y = niri_curr_geo_to_next_geo[1][1] <= 1.0;
				bool crop = can_crop_by_x && can_crop_by_y;

				vec4 color;

				// However, when we crop, we also want to crop out anything outside the
				// current geometry. This is because the area of the shader is unspecified
				// and usually bigger than the current geometry, so if we don't fill pixels
				// outside with transparency, the texture will leak out.
				//
				// When crossfading, this is not an issue because the area outside will
				// correspond to client-side decoration shadows, which are already supposed
				// to be outside.
				if (coords_next_geo.x < 0.0 || 1.0 < coords_next_geo.x ||
						coords_next_geo.y < 0.0 || 1.0 < coords_next_geo.y) {
					color = vec4(0.0);
				} else {
					color = texture2D(niri_tex_next, coords_crop.st);
				}

				return color;
			}
			vec4 resize_color(vec3 coords_curr_geo, vec3 size_curr_geo) {
				// You can pick one of the example functions or write your own.
				return crossfade_or_crop_next(coords_curr_geo, size_curr_geo);
			}
		"
	}

	horizontal-view-movement {
		spring damping-ratio=1.0 stiffness=800 epsilon=0.0001
	}

	window-movement {
		spring damping-ratio=1.0 stiffness=800 epsilon=0.0001
	}

	workspace-switch {
		curve "cubic-bezier" 0.05 0.7 0.1 1
	}

	window-open {
		spring damping-ratio=1.0 stiffness=800 epsilon=0.0001
		custom-shader r"
		vec4 default_open(vec3 coords_geo, vec3 size_geo) {
			float start_progress = 0.9;

			float scale = max(0.0, (niri_progress * (1. - start_progress) + start_progress));

			vec2 offset = vec2(0.5, scale - 0.5);

			coords_geo = vec3((coords_geo.xy - vec2(0.5)) / scale + offset, 1.0);

			vec3 coords_tex = niri_geo_to_tex * coords_geo;
			vec4 color = texture2D(niri_tex, coords_tex.st);

			color *= niri_clamped_progress;

			return color;
		}

		vec4 open_color(vec3 coords_geo, vec3 size_geo) {
			return default_open(coords_geo, size_geo);
		}
		"
	}

	window-close {
		curve "cubic-bezier" 0.37 1.23 0.63 1.47
		duration-ms 300

		custom-shader r"
		vec4 default_close(vec3 coords_geo, vec3 size_geo) {
			float start_progress = 0.985;

			float scale = max(0.0, ((1.0 - niri_progress) * (1. - start_progress) + start_progress));

			vec2 offset = vec2(0.5, scale - 0.5);

			coords_geo = vec3((coords_geo.xy - vec2(0.5)) / scale + offset, 1.0);

			vec3 coords_tex = niri_geo_to_tex * coords_geo;
			vec4 color = texture2D(niri_tex, coords_tex.st);

			color *= 1.0 - niri_clamped_progress;

			return color;
		}

		vec4 close_color(vec3 coords_geo, vec3 size_geo) {
			return default_close(coords_geo, size_geo);
		}
		"
	}
}

window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"
}

window-rule {
	match title="Navidrome"
	open-maximized true
}

window-rule {
	match title="Discord"
	open-maximized true
}

binds {
	Mod+W { toggle-column-tabbed-display; }
	Mod+O { toggle-overview; }
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+0 { focus-workspace 10; }
    Mod+Shift+1 { move-column-to-workspace focus=false 1; }
    Mod+Shift+2 { move-column-to-workspace focus=false 2; }
    Mod+Shift+3 { move-column-to-workspace focus=false 3; }
    Mod+Shift+4 { move-column-to-workspace focus=false 4; }
    Mod+Shift+5 { move-column-to-workspace focus=false 5; }
    Mod+Shift+6 { move-column-to-workspace focus=false 6; }
    Mod+Shift+7 { move-column-to-workspace focus=false 7; }
    Mod+Shift+8 { move-column-to-workspace focus=false 8; }
    Mod+Shift+9 { move-column-to-workspace focus=false 9; }
    Mod+Shift+0 { move-column-to-workspace focus=false 10; }
    Mod+Shift+Slash { show-hotkey-overlay; }

    Mod+Shift+Return hotkey-overlay-title="Spawn Terminal"           { spawn "newterm.sh"; }
    Mod+P                                                            { spawn "fuzzel"; }
    Mod+Shift+B                                                      { spawn "qutebrowser"; }
    Mod+Shift+P                                                      { spawn "keepassxc"; }
    Mod+Shift+D hotkey-overlay-title="Spawn Discord"                 { spawn "qbprof" "dsc"; }
    Mod+Shift+M hotkey-overlay-title="Spawn Navidrome (music)"       { spawn "qbprof" "mus"; }

	// avoid using ctrl for this bind because ctrl-m counts as enter in swaylock
    Alt+L       hotkey-overlay-title="Lock session"                  { spawn "swaylock"; }

    Mod+A       hotkey-overlay-title="Run Inkscape style switcher"   { spawn "style.sh"; }

    Mod+Shift+Z hotkey-overlay-title="Edit clipboard contents"       { spawn "clipedit.sh"; }
    Mod+Z       hotkey-overlay-title="Open bookmarks"                { spawn "newterm.sh" "-e" "bookmk"; }

    XF86AudioRaiseVolume  { spawn "swayosd-client" "--output-volume" "raise" "--max-volume" "120"; }
    XF86AudioLowerVolume  { spawn "swayosd-client" "--output-volume" "lower" "--max-volume" "120"; }
    XF86AudioMute         { spawn "swayosd-client" "--output-volume" "mute-toggle"; }
    XF86AudioPlay         { spawn "playerctl" "play-pause"; }
    XF86AudioNext         { spawn "playerctl" "next"; }
    XF86AudioPrev         { spawn "playerctl" "previous"; }
	XF86MonBrightnessDown { spawn "swayosd-client" "--brightness" "lower"; }
	XF86MonBrightnessUp   { spawn "swayosd-client" "--brightness" "raise"; }

    Mod+Shift+C { close-window; }

    Mod+K           { focus-column-left; }
    Mod+Period      { focus-window-down-or-column-right; }
    Mod+Comma       { focus-window-up-or-column-left; }
    Mod+J           { focus-column-right; }

    Mod+Shift+Space { toggle-window-floating; }
    Mod+Space       { switch-focus-between-floating-and-tiling; }

    Mod+Shift+Left   { move-column-left; }
    Mod+Shift+Down   { move-window-down; }
    Mod+Shift+Up     { move-window-up; }
    Mod+Shift+Right  { move-column-right; }
    Mod+Shift+K      { move-column-left; }
    Mod+Return       { move-column-left; } // dwm muscle memory
    Mod+Shift+Period { move-window-down; }
    Mod+Shift+Comma  { move-window-up; }
    Mod+Shift+J      { move-column-right; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }

    Mod+H              { focus-monitor-left; }
    Mod+L              { focus-monitor-right; }

    Win+M hotkey-overlay-title="Close notification"    { spawn "dunstctl" "close"; }
    Win+N hotkey-overlay-title="Restore notification"  { spawn "dunstctl" "history-pop"; }

    Mod+Shift+H        { move-column-to-monitor-left; }
    Mod+Shift+L        { move-column-to-monitor-right; }

    Mod+Page_Down      { focus-workspace-down; }
    Mod+Page_Up        { focus-workspace-up; }
    Mod+U              { focus-workspace-up; }
    Mod+I              { focus-workspace-down; }
    Mod+Ctrl+Page_Down { move-column-to-workspace-down; }
    Mod+Ctrl+Page_Up   { move-column-to-workspace-up; }
    Mod+Ctrl+U         { move-column-to-workspace-up; }
    Mod+Ctrl+I         { move-column-to-workspace-down; }

    Mod+Shift+Page_Down { move-workspace-to-monitor-right; }
    Mod+Shift+Page_Up   { move-workspace-to-monitor-left; }
    Mod+Shift+I         { move-workspace-down; }
    Mod+Shift+U         { move-workspace-up; }

    // You can bind mouse wheel scroll ticks using the following syntax.
    // These binds will change direction based on the natural-scroll setting.
    //
    // To avoid scrolling through workspaces really fast, you can use
    // the cooldown-ms property. The bind will be rate-limited to this value.
    // You can set a cooldown on any bind, but it's most useful for the wheel.
    Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    Mod+WheelScrollRight      { focus-column-right; }
    Mod+WheelScrollLeft       { focus-column-left; }
    Mod+Ctrl+WheelScrollRight { move-column-right; }
    Mod+Ctrl+WheelScrollLeft  { move-column-left; }

    Mod+Shift+WheelScrollDown      { focus-column-right; }
    Mod+Shift+WheelScrollUp        { focus-column-left; }
    Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }

    // Mod+TouchpadScrollDown { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02+"; }
    // Mod+TouchpadScrollUp   { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02-"; }

    Mod+Tab { focus-workspace-previous; }

    Mod+Ctrl+Comma  { consume-window-into-column; }
    Mod+Ctrl+Period { expel-window-from-column; }

    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    Mod+R { switch-preset-column-width; }
    Mod+Shift+R { switch-preset-window-height; }
    Mod+Ctrl+R { reset-window-height; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }
    Mod+Ctrl+Shift+F { toggle-windowed-fullscreen; }
    Mod+C { center-column; }

	Mod+F1 { set-dynamic-cast-window; }
	Mod+F2 { set-dynamic-cast-monitor; }
	Mod+F3 { clear-dynamic-cast-target; }

    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }

    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }

    Print { screenshot show-pointer=false; }
    Ctrl+Print { screenshot-screen show-pointer=false; }
    Mod+Print { screenshot-window; }

    Mod+Shift+Q { quit; }

    Mod+Shift+S hotkey-overlay-title="Suspend session" { spawn "suspend.sh"; }
}

hotkey-overlay {
	skip-at-startup
}
